{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useForm","handleSubmit","register","errors","setValue","Alert","icon","title","Swal","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","className","onSubmit","data","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","value","type","name","placeholder","ref","required","message","occupation","min","service","id","htmlFor","defaultChecked","rows","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72e811fd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Swal from \"sweetalert2\";\nimport { useForm } from \"react-hook-form\";\n\nfunction App() {\n  const { handleSubmit, register, errors, setValue } = useForm();\n\n  const clearForm = () => {\n    setValue(\"name\", \"\");\n    setValue(\"occupation\", \"\");\n    setValue(\"service\", \"\");\n    setValue(\"meal\", false);\n    setValue(\"health\", false);\n    setValue(\"transport\", false);\n    setValue(\"house\", false);\n    setValue(\"other\", false);\n    setValue(\"recommendation\", \"definitely\");\n    setValue(\"inputs\", \"\");\n  };\n\n  const Alert = (icon, title) => {\n    const Toast = Swal.mixin({\n      toast: true,\n      position: \"top-end\",\n      showConfirmButton: false,\n      timer: 3000,\n      timerProgressBar: true,\n      onOpen: toast => {\n        toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n        toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n      }\n    });\n\n    Toast.fire({\n      icon: icon,\n      title: title\n    });\n  };\n\n  const onSubmit = data => {\n    Swal.fire({\n      title: \"Confirmation !\",\n      text: \"Do you want to submit the survey or need to check some item?\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, Submit!\",\n      cancelButtonText: \"No, I need to revise\"\n    }).then(result => {\n      if (result.value) {\n        Alert(\"success\", \"Your survey successfully submitted\");\n        clearForm();\n      } else {\n        Alert(\"info\", \"Please do some revision\");\n      }\n    });\n  };\n\n  return (\n    <div className=\"AppContainer\">\n      <div className=\"FormContainer container\">\n        <h2 className=\"text-center\">Employee Satisfaction Survey</h2>\n        <hr />\n        <small>* = required</small>\n        <form className=\"mt-2\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"form-group\">\n            <label>* Full Name</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              className=\"form-control\"\n              placeholder=\"Enter your full name\"\n              ref={register({\n                required: \"Name is required\"\n              })}\n            />\n            {errors.name && (\n              <small className=\"text-danger\">{errors.name.message}</small>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label>* Occupation</label>\n            <select\n              name=\"occupation\"\n              className=\"custom-select\"\n              ref={register({\n                required: \"Occupation is required\"\n              })}\n            >\n              <option value=\"\">Choose your occupation</option>\n              <option value=\"Department Manager\">Department Manager</option>\n              <option value=\"Unit Manager\">Unit Manager</option>\n              <option value=\"Section Leader\">Section Leader</option>\n              <option value=\"Line Leader\">Line Leader</option>\n              <option value=\"Technician\">Technician</option>\n              <option value=\"Operator\">Operator</option>\n            </select>\n            {errors.occupation && (\n              <small className=\"text-danger\">{errors.occupation.message}</small>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label>* Years of service</label>\n            <input\n              type=\"number\"\n              name=\"service\"\n              className=\"form-control\"\n              ref={register({\n                required: \"Years of service is required\",\n                min: {\n                  value: 1,\n                  message: \"Can not be zero\"\n                }\n              })}\n            />\n            {errors.service && (\n              <small className=\"text-danger\">{errors.service.message}</small>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label>\n              What do you think should be improve (check one or more)\n            </label>\n            <div className=\"form-check\">\n              <input\n                name=\"meal\"\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                id=\"meal\"\n                ref={register}\n              />\n              <label className=\"form-check-label\" htmlFor=\"meal\">\n                Meal allowance\n              </label>\n            </div>\n            <div className=\"form-check\">\n              <input\n                name=\"health\"\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                id=\"health\"\n                ref={register}\n              />\n              <label className=\"form-check-label\" htmlFor=\"health\">\n                Health allowance\n              </label>\n            </div>\n            <div className=\"form-check\">\n              <input\n                name=\"transport\"\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                id=\"transport\"\n                ref={register}\n              />\n              <label className=\"form-check-label\" htmlFor=\"transport\">\n                Transport allowance\n              </label>\n            </div>\n            <div className=\"form-check\">\n              <input\n                name=\"house\"\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                id=\"house\"\n                ref={register}\n              />\n              <label className=\"form-check-label\" htmlFor=\"house\">\n                Housing allowance\n              </label>\n            </div>\n\n            <div className=\"form-check\">\n              <input\n                name=\"other\"\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                id=\"other\"\n                ref={register}\n              />\n              <label className=\"form-check-label\" htmlFor=\"other\">\n                Other\n              </label>\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label>Will you recommend the company to your friends</label>\n            <div className=\"form-check\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"recommendation\"\n                id=\"definitely\"\n                value=\"definitely\"\n                defaultChecked\n                ref={register}\n              />\n              <label className=\"form-check-label\" htmlFor=\"definitely\">\n                Definitely\n              </label>\n            </div>\n            <div className=\"form-check\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"recommendation\"\n                id=\"maybe\"\n                value=\"maybe\"\n                ref={register}\n              />\n              <label className=\"form-check-label\" htmlFor=\"maybe\">\n                Maybe\n              </label>\n            </div>\n            <div className=\"form-check\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"recommendation\"\n                id=\"no\"\n                value=\"no\"\n                ref={register}\n              />\n              <label className=\"form-check-label\" htmlFor=\"no\">\n                No\n              </label>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label>Additional input (optional)</label>\n            <textarea\n              name=\"inputs\"\n              className=\"form-control\"\n              rows=\"3\"\n              placeholder=\"Add additional inputs\"\n              ref={register}\n            ></textarea>\n          </div>\n          <button type=\"submit\" className=\"form-control btn btn-info\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}